openapi: 3.0.3
info:
  title: Lab 5 - OpenAPI 3.0
  description: |-
    API до сервісу створення плейлістів з музикою
  version: 1.0.11
servers:
  - url: https://localhost:8000/api/
tags:
  - name: users
    description: Web sevice users and superusers
    
  - name: songs
    description: Songs on web service

  - name: artists
    description: Web service artists
    
  - name: category
    description: Web service songs categoryes
    
  - name: playlists
    description: Web service playlists
    
  - name: albums
    description: Web service albums
paths:
  /users:
    post:
      tags:
        - users
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
          application/xml:
            schema:
              $ref: '#/components/schemas/Users'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Users'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
            application/xml:
              schema:
                $ref: '#/components/schemas/Users'
  /users/createWithList:
    post:
      tags:
        - users
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Users'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Users'
        '403':
          description: Forbiddent to access  
      security:
        - admin_auth:
            - write:users
            - read:users
  /users/login:
    get:
      tags:
        - users
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: login
          in: query
          description: The login to sing in
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
        '404':
          description: No page found
        '403':
          description: Forbidden to log in
  /users/logout:
    get:
      tags:
        - users
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /users/{username}:
    get:
      tags:
        - users
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - users
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
          application/xml:
            schema:
              $ref: '#/components/schemas/Users'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Users'
      responses:
        default:
          description: successful operation
      security:
        - user_auth:
            - write:users
            - read:users
    delete:
      tags:
        - users
      summary: Delete user
      description: This can be done by the logged in user and admin.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - user_auth:
            - write:users
            - read:users
        - admin_auth:
            - write:users
            - read:users
  /artists:
    get:
      tags:
        - artists
      summary: Get all artist
      description: This can be done by anyone who entered site.
      operationId: getArtistId
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artists'
            application/xml:
              schema:
                $ref: '#/components/schemas/Artists'
  /artists/{first_name}/{last_name}:
    get:
      tags:
        - artists
      summary: Get artist by first name and last name
      description: ''
      operationId: getArtistByname
      parameters:
        - name: first_name
          in: path
          description: 'The name that needs to be fetched. Use artist first name '
          required: true
          schema:
            type: string
        - name: last_name
          in: path
          description: 'The name that needs to be fetched. Use artist last name '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artists'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Artists'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    post:
      tags:
        - artists
      summary: Add new artist by parametrs if not exitsts
      description: This can only be done by the logged in user.
      operationId: updateArtistId
      parameters:
        - name: first_name
          in: path
          description: name that need to be added
          required: true
          schema:
            type: string
        - name: last_name
          in: path
          description: name that need to be added
          required: true
          schema:
            type: string
      requestBody:
        description: Add new artist by his name and last name
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Artists'
          application/xml:
            schema:
              $ref: '#/components/schemas/Artists'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Artists'
      responses:
        default:
          description: successful operation
      security:
        - admin_auth:
            - write:users
            - read:users
  /artists/{id}:
    delete:
      tags:
        - artists
      summary: Delete artist
      description: This can be done by the admin.
      operationId: deleteArtistId
      parameters:
        - name: id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - admin_auth:
            - write:users
            - read:users
  /songs:
    get:
      tags:
        - songs
      summary: Return all songs
      description: This can be done by anybody
      operationId: getSongs
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Songs'
            application/xml:
              schema:
                $ref: '#/components/schemas/Songs'
  /songs/{song_title}:
    get:
      tags:
        - songs
      summary: Get song by title
      description: ''
      operationId: getSongByname
      parameters:
        - name: song_title
          in: path
          description: 'Song title needed to by done to make get request '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Songs'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Songs'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    post:
      tags:
        - songs
      summary: Add new song
      description: This can only be done by the logged in user.
      operationId: addSong
      parameters:
        - name: song_title
          in: path
          description: 'Title of new song which wanted to add '
          required: true
          schema:
            type: string
      requestBody:
        description: Created song object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Songs'
          application/xml:
            schema:
              $ref: '#/components/schemas/Songs'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Songs'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Songs'
            application/xml:
              schema:
                $ref: '#/components/schemas/Songs'
      security:
        - user_auth:
            - write:users
            - read:users
        - admin_auth:
            - write:users
            - read:users
  /songs/{id}:
    delete:
      tags:
        - songs
      summary: Delete song
      description: This can be done by the admin.
      operationId: deleteSongId
      parameters:
        - name: id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - user_auth:
            - write:users
            - read:users
        - admin_auth:
            - write:users
            - read:users
  /category:
    get:
      tags:
        - category
      summary: Return all existing categoryes
      description: This can be done by anybody
      operationId: getCategory
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
  /category/{category_name}:
    post:
      tags:
        - category
      summary: Create new song category
      description: This can only be done by the admin.
      operationId: createCategory
      parameters:
        - name: category_name
          in: path
          description: 'Name of the category that have to be added'
          required: true
          schema:
            type: string
      requestBody:
        description: Created category object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/xml:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
      security:
        - admin_auth:
            - write:users
            - read:users
    get:
      tags:
        - category
      summary: Return some specific category
      description: This can be done by anybody
      operationId: getSomeCategory
      parameters:
        - name: category_name
          in: path
          description: 'Name of category that have to be get'
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
            application/xml:
              schema:
                $ref: '#/components/schemas/Category'
  /category/{id}:
     delete:
      tags:
        - category
      summary: Delete category
      description: This can be done by the admin.
      operationId: deleteCategoryId
      parameters:
        - name: id
          in: path
          description: The id that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - admin_auth:
            - write:users
            - read:users
  /playlists:
    get:
      tags:
        - playlists
      summary: Return all public playlists
      description: This can be done by anybody
      operationId: getAllPlaylists
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlists'
            application/xml:
              schema:
                $ref: '#/components/schemas/Playlists'
  /playlists/{username}/{playlistname}:
    post:
      tags:
        - playlists
      summary: Create new playlist by some user
      description: This can only be done by the logged in user.
      operationId: createNewPlayList
      parameters:
        - name: username
          in: path
          description: 'Name of the user who create new playlist'
          required: true
          schema:
            type: string
            
        - name: playlistname
          in: path
          description: 'Playlist which is created name'
          required: true
          schema:
            type: string
            
      requestBody:
        description: Created playlist object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Playlists'
          application/xml:
            schema:
              $ref: '#/components/schemas/Playlists'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Playlists'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlists'
            application/xml:
              schema:
                $ref: '#/components/schemas/Playlists'
      security:
        - user_auth:
            - write:users
            - read:users
    get:
      tags:
        - playlists
      summary: Return user public playlists
      description: This can be done by anybody
      operationId: getUserPlaylists
      parameters:
        - name: username
          in: path
          description: 'Name of the user whose playlist enter'
          required: true
          schema:
            type: string
            
        - name: playlistname
          in: path
          description: 'Name of publich playlist  of some user in which enter'
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlists'
            application/xml:
              schema:
                $ref: '#/components/schemas/Playlists'
    put:
      tags:
        - playlists
      summary: Update playlist
      description: This can only be done by the logged in user.
      operationId: updatePublicPlaylist
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
            
        - name: playlistname
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
            
      requestBody:
        description: Update an existent public playlist
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Playlists'
          application/xml:
            schema:
              $ref: '#/components/schemas/Playlists'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Playlists'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - playlists
      summary: Delete existing playlist
      description: This can be done by the logged in user and admin.
      operationId: deletePublicPlaylist
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
            
        - name: playlistname
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
            
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - user_auth:
            - write:users
            - read:users
  /playlists/{username}/private/{playlistname}:
    post:
      tags:
        - playlists
      summary: Create new private playlist by some user
      description: This can only be done by the logged in user.
      operationId: createNewPrivatePlayList
      parameters:
        - name: username
          in: path
          description: 'Name of the user who create private playlist '
          required: true
          schema:
            type: string
            
        - name: playlistname
          in: path
          description: 'Name of the private playlist'
          required: true
          schema:
            type: string
            
      requestBody:
        description: Created playlist object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Playlists'
          application/xml:
            schema:
              $ref: '#/components/schemas/Playlists'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Playlists'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlists'
            application/xml:
              schema:
                $ref: '#/components/schemas/Playlists'
      security:
        - user_auth:
            - write:users
            - read:users
    get:
      tags:
        - playlists
      summary: Return user private playlists
      description: This can be done by anybody
      operationId: getUserPrivatePlaylists
      parameters:
        - name: username
          in: path
          description: 'Name of the user who created private playlist'
          required: true
          schema:
            type: string
            
        - name: playlistname
          in: path
          description: 'Name of the private playlist'
          required: true
          schema:
            type: string
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Playlists'
            application/xml:
              schema:
                $ref: '#/components/schemas/Playlists'
      security:
        - user_auth:
            - write:users
            - read:users
    put:
      tags:
        - playlists
      summary: Update private playlist
      description: This can only be done by the logged in user.
      operationId: updatePrivatePlaylist
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
            
        - name: playlistname
          in: path
          description: name that need to be updated
          required: true
          schema:
            type: string
            
      requestBody:
        description: Update an existent private playlist
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Playlists'
          application/xml:
            schema:
              $ref: '#/components/schemas/Playlists'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Playlists'
      responses:
        default:
          description: successful operation
      security:
        - user_auth:
            - write:users
            - read:users
    delete:
      tags:
        - playlists
      summary: Delete existing private playlist
      description: This can be done by the logged in user.
      operationId: deletePrivatePlaylist
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
            
        - name: playlistname
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
            
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - user_auth:
            - write:users
            - read:users
  /albums:
     get:
      tags:
        - albums
      summary: Get all albums
      description: This can be done by anyone who entered site.
      operationId: getAlbum
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Albums'
            application/xml:
              schema:
                $ref: '#/components/schemas/Albums'
  /albums/{albumname}:
    get:
      tags:
        - albums
      summary: Get album by title
      description: ''
      operationId: getAlbumByname
      parameters:
        - name: albumname
          in: path
          description: 'Album name'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Albums'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Albums'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - albums
      summary: Update album
      description: This can only be done by the logged in user.
      operationId: updateAlbum
      parameters:
        - name: albumname
          in: path
          description: name that need to be update
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent album
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
          application/xml:
            schema:
              $ref: '#/components/schemas/Users'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Users'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Albums'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Albums'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - admin_auth:
            - write:users
            - read:users
        - user_auth:
            - write:users
            - read:users
    post:
      tags:
        - albums
      summary: Add new album
      description: This can only be done by the logged in user.
      operationId: addAlbum
      parameters:
        - name: albumname
          in: path
          description: 'Album name'
          required: true
          schema:
            type: string
      requestBody:
        description: Created song object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Albums'
          application/xml:
            schema:
              $ref: '#/components/schemas/Albums'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Albums'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Albums'
            application/xml:
              schema:
                $ref: '#/components/schemas/Albums'
      security:
        - user_auth:
            - write:users
            - read:users
        - admin_auth:
            - write:users
            - read:users
  /albums/{artistname}:
    get:
      tags:
        - albums
      summary: Return all album of some artist
      description: ''
      operationId: getAlbumByArtist
      parameters:
        - name: artistname
          in: path
          description: 'Name of some artist'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Albums'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Albums'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /albums/{id}:
     delete:
      tags:
        - albums
      summary: Delete album
      description: This can be done by the admin.
      operationId: deleteAlbumId
      parameters:
        - name: id
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      security:
        - user_auth:
            - write:users
            - read:users
        - admin_auth:
            - write:users
            - read:users
components:
  schemas:
  
    Users:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 101
        frist_name:
          type: string
          example: Maks
        last_name:
          type: string
          example: Orlianskyi
        login:
          type: string
          example: max123
        password:
          type: string
          format: password
          example: qwe123qwe
        role:
          type: string
          enum: 
            - user
            - superuser
 
      xml:
        name: users
    Playlists:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        creador_id:
          type: integer
          format: int64
          $ref: '#/components/schemas/Users'
          example: 124
        artist_id:
          type: integer
          $ref: '#/components/schemas/Artists'
          example: 4
        song_id:
          type: integer
          $ref: '#/components/schemas/Songs'
          example: 5
        status:
          type: string
          enum:
          - private
          - public
        
      xml:
        name: playlists
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: HipHop
      xml:
        name: category
    Artists:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        first_name:
          type: string
          example: Leroy
        last_name:
          type: string
          example: Jenkins
        rating:
          type: integer
          example: 4
          enum:
          - 1
          - 2
          - 3
          - 4
          - 5

      xml:
        name: artists
    Songs:
      type: object
      properties:
        id:
          type: integer
          format: int64
        Category_id:
          type: integer
          format: int64
          $ref: '#/components/schemas/Category'
          
        title:
          type: string
          example: Wham! - Last Christmas I gave you my heart 
        description:
          type: string
          example: lorem ipsum...
        lyrics:
          type: string
          example: Last Christmas I gave you my heart...
        rating:
          type: integer
          format: int64
          enum:
          - 1
          - 2
          - 3
          - 4
          - 5
        duration:
          type: number
          format: float
          example: 3.43

      xml:
        name: songs
    Albums:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        
        album_name:
          type: string
          example: Stressed Out

        relesed:
          type: string
          format: date-time
          
        artist_id:
          type: integer
          format: int64
          $ref: '#/components/schemas/Artists'
        
        song_id:
          type: integer
          format: int64
          $ref: '#/components/schemas/Songs'
      xml:
        name: albums
  securitySchemes:
    user_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:users: modify users
            read:users: read users
    admin_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:users: modify all
            read:users: read all