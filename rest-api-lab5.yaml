openapi: 3.0.0
info:
  version: "0.0.1"
  title: Billboard_CRUD
servers:
  - url: https://virtserver.swaggerhub.com/rDrayBen/Billboard_CRUD/0.0.1
tags:
  - name: ad
    description: Everything about your ads
  - name: user
    description: Everything about user
paths:
  /advertisement/local:
    post:
      summary: Post new local advertisements
      tags: 
      - ad
      operationId: postLocalAd
      requestBody:
        content:
          application/json:
              schema: 
                $ref: "#/components/schemas/CreateLocalAd"
        required: true
      responses: 
        '200':
          description: Everything completed successfuly
        '405':
          description: Invalid input
      security:
        - billboard_auth:
            - write:ads
            - read:ads
          
    get:
      tags:
        - ad
      summary: Finds local Ads by category
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findLocalAdsByTags
      parameters:
        - name: category
          in: query
          description: Categories to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetLocalAd"          
        '400':
          description: Invalid tag value
      security:
        - billboard_auth:
            - write:ads
            - read:ads
            
  /advertisement/public:
    post:
        summary: Post new public advertisements
        tags: 
        - ad
        operationId: postPublicAd
        requestBody:
          content:
            application/json:
                schema: 
                  $ref: "#/components/schemas/CreatePublicAd"
          required: true
        responses: 
          '200':
            description: Everything completed successfuly
          '405':
            description: Invalid input
        security:
          - billboard_auth:
              - write:ads
              - read:ads
    get:
      tags:
        - ad
      summary: Finds public Ads by category
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: findPublicAdsByTags
      parameters:
        - name: category
          in: query
          description: Categories to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPublicAd"          
        '400':
          description: Invalid tag value
      security:
        []
          
  /advertisement/local/{id}:
    put:
      tags:
      - ad
      summary: Update info about local advertisement
      operationId: updateLocalAd
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
            example: 1
        - name: title
          in: query
          required: false
          schema:
            type: string
            example: Driver needed
        - name: about
          in: query
          required: false
          schema:
            type: string
            example: Our company needs a driver with experience
        - name: country
          in: query
          required: false
          schema:
            type: string
            example: USA
        - name: city
          in: query
          required: false
          schema:
            type: string
            example: Lviv
        - name: photoUrls
          in: query
          required: false
          schema:
            type: array
            xml:
              wrapped: true
            items:
                type: string
                xml:
                  name: photoUrl
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalAd'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Ad not found
        '405':
          description: Validation exception
      security:
        - billboard_auth:
            - write:ads
            - read:ads
    delete:
      tags:
        - ad
      summary: Deletes the local ad
      description: delete the local ad
      operationId: deleteLocalAd
      parameters:
        - name: id
          in: path
          description: Ad id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Opearation successful
        '400':
          description: Invalid ad value
      security:
        - billboard_auth:
            - write:ads
            - read:ads    
  /advertisement/public/{id}:
      put:
        tags:
        - ad
        summary: Update info about public advertisement
        operationId: updatePublicAd
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: integer
              example: 1
          - name: title
            in: query
            required: false
            schema:
              type: string
              example: Driver needed
          - name: about
            in: query
            required: false
            schema:
              type: string
              example: Our company needs a driver with experience
          - name: photoUrls
            in: query
            required: false
            schema:
              type: array
              xml:
                wrapped: true
              items:
                type: string
                xml:
                  name: photoUrl
        responses:
          '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/PublicAd'          
          '400':
            description: Invalid ID supplied
          '404':
            description: Ad not found
          '405':
            description: Validation exception
        security:
          - billboard_auth:
              - write:ads
              - read:ads
      delete:
        tags:
          - ad
        summary: Deletes the public ad
        description: delete the public ad
        operationId: deletePublicAd
        parameters:
          - name: id
            in: path
            description: Ad id to delete
            required: true
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Opearation successful
          '400':
            description: Invalid ad value
        security:
          - billboard_auth:
              - write:ads
              - read:ads    
      
  # /localAdvertisement/{country}/{city}:
  #   get:
  #     summary: Return all ads in selected area
  #     tags:
  #       - ad
  #     operationId: getLocalAds
  #     parameters: 
  #       - name: country
  #         in: path
  #         required: true
  #         schema:
  #           type: string
  #           example: Ukraine
  #       - name: city
  #         in: path
  #         required: true
  #         schema: 
  #           type: string
  #           example: Zaporizhzhia
  #     responses:
  #       '200':
  #         description: Everything completed successfuly
  #         content:
  #           application/json:
  #             schema: 
  #               $ref: "#/components/schemas/Ad"
  #       '400':
  #         description: Invalid country or city supplied
  #       '404':
  #         description: Ad not found
  #     security:
  #       - billboard_auth:
  #           - write:ads
  #           - read:ads
          
  # /advertisement/findByStatus:
  #   get:
  #     tags:
  #       - ad
  #     summary: Finds ads by status
  #     description: Multiple status values can be provided with comma separated strings
  #     operationId: findAdsByStatus
  #     parameters:
  #       - name: status
  #         in: query
  #         description: Status values that need to be considered for filter
  #         required: false
  #         explode: true
  #         schema:
  #           type: string
  #           default: active
  #           enum:
  #             - active
  #             - closed
  #             - confirmed
  #     responses:
  #       '200':
  #         description: successful operation
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Ad'          
  #           application/xml:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Ad'
  #       '400':
  #         description: Invalid status value
  #     security:
  #       - billboard_auth:
  #           - write:ads
  #           - read:ads
          
  /user:
    post:
      tags: 
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '200':
          description: Successful operation
        '405':
          description: Invalid input
                
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: email
          in: query
          description: The email for login
          required: true
          schema:
            type: string    
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
      security:
        - billboard_auth:
            - write:ads
            - read:ads
          
  /user/{id}:
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: id of the user that need to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: firstName
          in: query
          description: First name of the user that need to be updated
          required: false
          schema:
            type: string
            example: John
        - name: lastName
          in: query
          description: Last name of the user that need to be updated
          required: false
          schema:
            type: string
            example: James
        - name: email
          in: query
          description: Email of the user that need to be updated
          required: false
          schema:
            type: string
            example: john@email.com
        - name: phone
          in: query
          description: Phone of the user that need to be updated
          required: false
          schema:
            type: string
            example: '12345678'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/GetUser' 
        '400':
          description: Invalid Id
        '405':
          description: Invalid input
      security:
        - billboard_auth:
            - write:ads
            - read:ads
        
    get: 
      tags:
        - user
      summary: Find user by id
      operationId: findUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/GetUser' 
        '400':
          description: Invalid id supplied
      security:
        - billboard_auth:
          - admin
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The id of the user that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Success
        '400':
          description: Invalid id supplied
        '404':
          description: User not found
      security:
        - billboard_auth:
          - write:ads
          - read:ads
  


components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Transport
    
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345678'
        phone:
          type: string
          example: '12345678'
        userStatus:
          type: string
          enum:
          - regular
          - premium
          default: regular
        location:
          $ref: "#/components/schemas/Location"
          
    GetUser:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        phone:
          type: string
          example: '12345678'
        userStatus:
          type: string
          enum:
          - regular
          - premium
          default: regular
        location:
          $ref: "#/components/schemas/Location"
    Location:
      type: object
      properties:
        id: 
          type: integer
          format: int64
          example: 1
        country: 
          type: string
          example: 'Ukraine'
        city:
          type: string
          example: 'Zaporizhzhia'
    
    CreateUser:
      type: object
      properties:
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        phone:
          type: string
          example: '12345678'
        location: 
          $ref: "#/components/schemas/Location"
        password:
          type: string
          example: '12345678'
          
    LocalAd:
      type: object
      required: 
       - name
       - description
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Car
        category:
          $ref: '#/components/schemas/Category'
        status:
          type: string
          enum:
          - active
          - closed
          - confirmed
        publishingDate:
          type: string
          format: 2022-07-01T15:00:00+01
        about:
          type: string
          example: I am selling this car 
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        user_id:
          $ref: "#/components/schemas/User"
        location:
          $ref: "#/components/schemas/Location"
    
    PublicAd:
      type: object
      required: 
       - name
       - description
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Car
        category:
          $ref: '#/components/schemas/Category'
        status:
          type: string
          enum:
          - active
          - closed
          - confirmed
        publishingDate:
          type: string
          format: 2022-07-01T15:00:00+01
        about:
          type: string
          example: I am selling this car 
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        user_id:
          $ref: "#/components/schemas/User"
          
    CreateLocalAd:
      type: object
      required: 
         - name
         - description
      properties:
        title:
          type: string
          example: Car
        category:
          $ref: '#/components/schemas/Category'
        publishingDate:
          type: string
          format: 2022-07-01T15:00:00+01
        about:
          type: string
          example: I am selling this car 
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        location:
          $ref: "#/components/schemas/Location"
                          
    CreatePublicAd:
      type: object
      properties:
        title:
          type: string
          example: Car
        category:
          $ref: '#/components/schemas/Category'
        publishingDate:
          type: string
          format: 2022-07-01T15:00:00+01
        about:
          type: string
          example: I am selling this car 
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
              
    GetLocalAd:
      type: object
      required: 
       - name
       - description
      properties:
        title:
          type: string
          example: Car
        category:
          $ref: '#/components/schemas/Category'
        status:
          type: string
          enum:
          - active
          - closed
          - confirmed
        publishingDate:
          type: string
          format: 2022-07-01T15:00:00+01
        about:
          type: string
          example: I am selling this car 
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        user_id:
          $ref: "#/components/schemas/GetUser"
        location:
          $ref: "#/components/schemas/Location"
          
    GetPublicAd:
      type: object
      required: 
       - name
       - description
      properties:
        title:
          type: string
          example: Car
        category:
          $ref: '#/components/schemas/Category'
        status:
          type: string
          enum:
          - active
          - closed
          - confirmed
        publishingDate:
          type: string
          format: 2022-07-01T15:00:00+01
        about:
          type: string
          example: I am selling this car 
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        user_id:
          $ref: "#/components/schemas/GetUser"
    
  securitySchemes: 
    billboard_auth: 
      type: oauth2
      flows: 
        implicit: 
          authorizationUrl: "http://example.org/api/oauth/dialog"
          scopes:
            write:ads: modify ads in your account
            read:ads: read your ads
            admin: find any user
  